{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","city","setCity","display","setDisplay","data","setData","weather","setWeather","location","setLocation","getData","e","a","key","target","value","fetch","api","then","response","json","console","log","main","name","sys","country","alert","className","temp","type","placeholder","onChange","onKeyDown","feels_like","map","weather_obj","description","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mPAiFeA,MA9Ef,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNC,EADM,KACAC,EADA,OAEiBF,oBAAS,GAF1B,mBAENG,EAFM,KAEGC,EAFH,OAGWJ,mBAAS,IAHpB,mBAGNK,EAHM,KAGAC,EAHA,OAIiBN,mBAAS,IAJ1B,mBAINO,EAJM,KAIGC,EAJH,OAOmBR,mBAAS,IAP5B,mBAONS,EAPM,KAOIC,EAPJ,KAcPC,EAAO,uCAAG,WAAOC,GAAP,SAAAC,EAAA,yDACD,UAAVD,EAAEE,IADS,mBAEU,KAAnBF,EAAEG,OAAOC,MAFA,gCAGJC,MAAMC,qDAAcjB,EAAdiB,wDACXC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAd,GACJiB,QAAQC,IAAIlB,GACZC,EAAQD,EAAKmB,MACbhB,EAAWH,EAAKE,SAChBG,EAAiBL,EAAKoB,KAAO,IAAMpB,EAAKqB,IAAIC,SAC5Cf,EAAEG,OAAOC,MAAQ,MAElBG,KAAMf,GAAW,IAZR,6BAeVwB,MAAM,0BAfI,2CAAH,sDAoBb,OACE,qBAAKC,UAAU,MAAf,SACE,sBAAKA,UAAWxB,EAAKyB,KAAK,GAAI,4BAA8B,uBAA5D,UACE,qBAAKD,UAAU,cAAf,SACE,qBAAKA,UAAU,aAAf,SACE,uBACEE,KAAK,OACLF,UAAU,aACVG,YAAY,SACZC,SAlCa,SAACrB,GAExBV,EAAQU,EAAEG,OAAOC,QAiCPkB,UAAWvB,QAIjB,qBAAKkB,UAAU,kBAAf,SACG1B,EACD,sBAAK0B,UAAU,kBAAf,UACE,qBAAKA,UAAU,WAAf,SACGpB,IAEH,sBAAKoB,UAAU,WAAf,UACA,sBAAKA,UAAU,OAAf,UACGxB,EAAKyB,KAAO,QAAK,0BAEpB,sBAAKD,UAAU,aAAf,wBACcxB,EAAK8B,WAAa,QAAK,6BAGrC,8BACC5B,EAAQ6B,KAAI,SAACC,GAAD,OACX,qBAAKR,UAAU,qBAAf,SACGQ,EAAYC,sBAKX,aC7DHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBtB,MAAK,YAAkD,IAA/CuB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d237f877.chunk.js","sourcesContent":["import React, { useState} from 'react'\nimport './App.css';\n\nfunction App() {\n  const [city, setCity] = useState(\"\")\n  const [display, setDisplay] = useState(false)\n  const [data, setData] = useState({})\n  const [weather, setWeather] = useState([])\n  const api_key = \"a67e838fb54bdc0156e62e57e6423d3f\";\n  const api = \"https://api.openweathermap.org/data/2.5/weather\"\n  const [location, setLocation] = useState(\"\")\n\n  const handleCityChange = (e) => {\n    // console.log(e.target.value)\n    setCity(e.target.value)\n  }\n  \n  const getData = async (e) => {\n    if(e.key === \"Enter\"){\n      if(e.target.value !== \"\"){\n        await fetch(api + \"?q=\" + city + \"&units=metric&appid=\" + api_key)\n        .then(response => response.json())\n        .then(data => {\n          console.log(data)\n          setData(data.main)\n          setWeather(data.weather)\n          setLocation(\"\" + data.name + \",\" + data.sys.country)\n          e.target.value = \"\"\n        })\n        .then( setDisplay(true))\n      }\n      else {\n        alert(\"Please enter city name\")\n      }     \n  }\n}\n\n  return (\n    <div className=\"App\">\n      <div className={data.temp>16? \"weather-form-display-warm\" : \"weather-form-display\"}>\n        <div className=\"search-form\">\n          <div className=\"search-bar\">\n            <input \n              type=\"text\"  \n              className=\"search-bar\"\n              placeholder=\"Search\"\n              onChange={handleCityChange}\n              onKeyDown={getData}\n              ></input>\n          </div>\n        </div>\n        <div className=\"weather-display\">\n          {display?\n          <div className=\"display-section\">\n            <div className=\"location\">\n              {location}\n            </div>\n            <div className=\"all-temp\">\n            <div className=\"temp\">\n              {data.temp + \"°c\"}<br/>\n            </div>\n            <div className=\"feels-like\">\n              Feels like {data.feels_like + \"°c\"}<br/>\n            </div>\n            </div>\n            <div>\n            {weather.map((weather_obj) => (\n              <div className=\"current-conditions\">\n                {weather_obj.description}  \n              </div>\n\n            ))}\n            </div>\n          </div>: null\n          }\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}